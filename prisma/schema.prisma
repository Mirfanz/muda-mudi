// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Pembina
  Ketua
  Sekretaris
  Bendahara
  Anggota
  Senior
  Admin
}

model User {
  id       String   @id @default(cuid())
  name     String
  phone    String   @unique
  password String
  isMale   Boolean
  avatar   String?
  role     Role
  birth    DateTime @db.Date()
  active   Boolean  @default(true)
  inStudy  Boolean  @default(false)

  deletedAt DateTime? @db.Timestamptz()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  deletedFinancialHistories FinancialHistory[] @relation("DeleterFinancialHistory")
  financialHistories        FinancialHistory[] @relation("AuthorFinancialHistory")
  events                    Event[]            @relation("AuthorEvent")
  attendancePresent         Attendees[]        @relation("UserAttendees")

  @@map("users")
}

model FinancialHistory {
  id          String    @id @default(cuid())
  income      Boolean
  title       String
  note        String?
  amount      Int
  images      String[]
  date        DateTime  @db.Date
  createdAt   DateTime  @default(now())
  deletedAt   DateTime? @db.Timestamptz()

  authorId    String
  deletedById String?
  eventId     String?
  author      User    @relation("AuthorFinancialHistory", fields: [authorId], references: [id])
  deletedBy   User?   @relation("DeleterFinancialHistory", fields: [deletedById], references: [id])
  event       Event?  @relation("EventCost", fields: [eventId], references: [id])

  @@map("financial_histories")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  note        String?
  location    String
  locationUrl String?
  startDate   DateTime @db.Date()
  endDate     DateTime @db.Date()
  cover       String?
  images      String[]
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  authorId    String
  author      User               @relation("AuthorEvent", fields: [authorId], references: [id])
  attendances Attendance[]       @relation("EventAttendance")
  costs       FinancialHistory[] @relation("EventCost")

  @@map("events")
}

model Attendance {
  id        String      @id @default(cuid())
  start     DateTime
  end       DateTime
  createdAt DateTime    @default(now())
  eventId   String
  event     Event       @relation("EventAttendance", fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendees[] @relation("Attendees")

  @@map("attendances")
}

model Attendees {
  id          String    @id
  isMandatory Boolean
  presentAt   DateTime?

  attendanceId String
  userId       String
  attendance   Attendance @relation("Attendees", fields: [attendanceId], references: [id], onDelete: Cascade)
  user         User       @relation("UserAttendees", fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendees")
}
